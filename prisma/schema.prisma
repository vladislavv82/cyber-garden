// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  email    String  @unique
  name     String?
  password String

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  avatarPath        String?
  verificationToken String? @default(cuid()) @map("verification_token")
  token             String? @unique @default(cuid()) @map("token")

  rights Role[] @default([USER])

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  groupRole GroupRole @default(MEMBER)

  tasks            Task[]
  timeBlocks       TimeBlock[]
  pomodoroSessions PomodoroSession[]
  Category         Category[]
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  name        String
  description String?

  inviteLink String? @map("invite_link")
  users      User[]

  @@map("group")
}

enum GroupRole {
  MEMBER
  TUTOR
  OWNER
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  name String @unique

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  task Task[]

  @@map("category")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(0)

  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  isCompleted Boolean? @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  totalSeconds Int      @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}

enum Role {
  USER
  TUTOR
  ADMIN
}
